#+TITLE: Readme

* note list of =snscrape.modules.twitter.Tweet= class attribute #+BEGIN_SRC md url: str date: datetime.datetime content: str renderedContent: str id: int user: 'User' replyCount: int retweetCount: int likeCount: int quoteCount: int conversationId: int lang: str source: str sourceUrl: typing.Optional[str] = None sourceLabel: typing.Optional[str] = None outlinks: typing.Optional[typing.List[str]] = None tcooutlinks: typing.Optional[typing.List[str]] = None media: typing.Optional[typing.List['Medium']] = None retweetedTweet: typing.Optional['Tweet'] = None quotedTweet: typing.Optional['Tweet'] = None inReplyToTweetId: typing.Optional[int] = None inReplyToUser: typing.Optional['User'] = None mentionedUsers: typing.Optional[typing.List['User']] = None coordinates: typing.Optional['Coordinates'] = None place: typing.Optional['Place'] = None hashtags: typing.Optional[typing.List[str]] = None cashtags: typing.Optional[typing.List[str]] = None username = snscrape.base._DeprecatedProperty('username', lambda self: self.user.username, 'user.username') outlinksss = snscrape.base._DeprecatedProperty('outlinksss', lambda self: ' '.join(self.outlinks) if self.outlinks else '', 'outlinks') tcooutlinksss = snscrape.base._DeprecatedProperty('tcooutlinksss', lambda self: ' '.join(self.tcooutlinks) if self.tcooutlinks else '', 'tcooutlinks') #+END_SRC
* Features
- get price the next and compare it to the tweet give score to the
